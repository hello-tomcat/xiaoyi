package com.xiaoyi.manager.action;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Calendar;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSONObject;
import com.xiaoyi.manager.domain.Picture;
import com.xiaoyi.manager.service.IPictureService;

/** 
* @author  Administrator
* @version 创建时间：2018年1月15日 下午4:34:14 
* 程序的简单说明
*/

@Controller
@RequestMapping("/picture")
public class PictureAction {

	private static final Logger logger = LoggerFactory
			.getLogger(PictureAction.class);

	@Resource
	private IPictureService pictureService;

	@RequestMapping(value="/deletePicture",method=RequestMethod.POST)
	@ResponseBody
	public JSONObject deletePicture(HttpServletRequest request
			,HttpServletResponse response,
			@RequestBody JSONObject reqData) {
		JSONObject res = new JSONObject();
		setPromptMessage(res , "1" , "删除成功!");
		String picid = reqData.getString("picid");
		try {
			if (!StringUtils.isEmpty(picid)) {
				pictureService.deleteByPrimaryKey(picid);
			}else {
				 setPromptMessage(res , "-1" , "参数传递异常!");
			}
		} catch (Exception e) {
			 logger.error(e.getMessage());
			 setPromptMessage(res , "-1" , "删除失败!");
		}
		return res;
	}
	
	
	
	@RequestMapping(value="/getPictureList",method=RequestMethod.POST)
	@ResponseBody
	public JSONObject getPictureList(HttpServletRequest request
			,HttpServletResponse response,
			@RequestBody JSONObject reqData) {
		int picType = reqData.getIntValue("picType");
		JSONObject res = new JSONObject();
		JSONObject param = new JSONObject();
		param.put("picType", picType);
		List<Picture> list = pictureService.getPictureList(param);
		res.put("data", list);
	    setPromptMessage(res, "1", "查询成功");
		return res;
	}
	
	public JSONObject uploadPictureFile(HttpServletRequest req, @RequestParam("fileBoby") MultipartFile file , HttpServletResponse res) {
		JSONObject response = new JSONObject();
		String pictype = req.getParameter("pictype");
 
			JSONObject parm =new JSONObject();
			if (file!=null && file.getSize() > 30) {
				InputStream in = null;
				try {
					  in = file.getInputStream();
					  ServletContext context = req.getSession().getServletContext(); 
					  String path2  = context.getRealPath("upload");
					  logger.error("path2path2--" + path2);
					  String fileName;
					  try {
						  fileName = saveFile(file.getOriginalFilename() , in , path2);
						  parm.put("uuid", UUID.randomUUID().toString());
						  parm.put("picUrl", "\\upload\\" + fileName);
						  parm.put("picName", file.getOriginalFilename());
						  
						  String picid = UUID.randomUUID().toString();
						  String picurl = "\\upload\\" + fileName;
						  String picname =  file.getOriginalFilename();
						 
						  Byte pictypes =  pictype.getBytes()[0];
				 
						  Picture record = new Picture();
						  record.setPicid(picid);
						  record.setPicurl(picurl);
						  record.setPicname(picname);
						  record.setPictype(pictypes);
						  pictureService.insert(record);
						 
					   } catch (Exception e) {
						    logger.error(e.getMessage());
							e.printStackTrace();
					   }
				} catch (IOException e) {
					logger.error(e.getMessage());
					e.printStackTrace();
				}
		 }
 
		return response;
	}
	
	
	private void setPromptMessage(JSONObject object, String code, String message) {
		object.put("code", code);
		object.put("msg", message);
	}
	
	

	public String saveFile(String fileName ,  InputStream in,  String savePath ) throws Exception   {
		
		String filePath = null ;
		 
			Calendar calendar = Calendar.getInstance();
			UUID uuid = UUID.randomUUID();
			String newName =calendar.get(Calendar.YEAR) + "" + (calendar.get(Calendar.MONTH) + 1) + "" +calendar.get(Calendar.DAY_OF_MONTH)  
					+ uuid.toString().replace("-", "")
					+  fileName.substring(fileName.lastIndexOf(".")); 
			filePath =  savePath + "/" +newName ; 
			logger.error("filePath--" + filePath);  
			FileOutputStream fos = new FileOutputStream(filePath);
			byte[] buffer = new byte[1024];
			int len = 0;
			while ((len = in.read(buffer)) > 0){
				fos.write(buffer , 0 , len);
			}
			fos.flush();
			fos.close();
			 
			return newName;
 
	}
	
	
}
